plugins {
    id "io.micronaut.build.internal.convention-core-library"
    id "org.checkerframework" version "0.6.37"
}

micronautBuild {
    core {
        documented = false
        usesMicronautTestJunit()
    }

}

dependencies {
    compileOnly libs.javax.inject
    api libs.jakarta.inject.api
    api libs.managed.jakarta.annotation.api
    api project(':core')

    compileOnly libs.managed.snakeyaml
    compileOnly libs.managed.groovy
    compileOnly libs.managed.kotlin.stdlib.jdk8

    testImplementation project(":context")
    testImplementation project(":inject-groovy")
    testImplementation project(":inject-test-utils")
    testImplementation libs.systemlambda
    testImplementation libs.managed.snakeyaml
    testRuntimeOnly libs.junit.jupiter.engine

    // UCR Tainting checker
    checkerFramework "edu.ucr.cs.riple.taint:ucrtainting-checker:$System.env.UCRT_VERSION"
    compileOnly "edu.ucr.cs.riple.taint:ucrtainting-checker-qual:$System.env.UCRT_VERSION"
}

tasks.withType(Test).configureEach {
    if (JavaVersion.current().majorVersion.toInteger() >= 17) {
        logger.warn("Opening java.util and java.lang, so SystemLambda can work")
        jvmArgs += [
                '--add-opens', 'java.base/java.util=ALL-UNNAMED',
                '--add-opens', 'java.base/java.lang=ALL-UNNAMED',
        ]
    }
}

checkstyleMain.enabled = false

repositories {
    mavenLocal()
    mavenCentral()
}
def checkerConfig = project.rootDir.absolutePath + "/annotator-out/" + project.name + "/checker.xml"
checkerFramework {
    checkers =["edu.ucr.cs.riple.taint.ucrtainting.UCRTaintingChecker"]
    extraJavacArgs = [
            "-Awarns",
            "-AsuppressWarnings=type.anno.before.modifier,type.anno.before.decl.anno",
            "-AannotatedPackages=io.micronaut.core",
            "-AenableLibraryCheck=$System.env.ANNOTATOR_LIBRARY",
            "-AenablePolyTaintInference=$System.env.ANNOTATOR_POLY",
            "-AenableTypeArgumentInference=$System.env.ANNOTATOR_TYPE_ARG",
            "-AenableSerialization",
            "-AserializationConfigPath=$checkerConfig"
    ]
}
